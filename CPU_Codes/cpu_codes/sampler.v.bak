module sampler(clk,MemWrite,reset,node_update,WriteData,DataAdr,i_fault,p_block,b_drop,cpu_done,right_en,left_en,forward_en,reverse_en,past_node,present_node,future_node,prev_right_en,prev_left_en,prev_forward_en,prev_reverse_en,cpu_writes1);
input clk;input MemWrite; input reset; input[31:0] WriteData,DataAdr; output cpu_done;output right_en,left_en,forward_en,reverse_en,prev_right_en,prev_left_en,prev_forward_en,prev_reverse_en; 
reg cpu_done=0;
input i_fault,p_block,b_drop;
reg [7:0] ir=0;
input node_update;
output [4:0] past_node,present_node,future_node;

reg [5:0] j=1;
reg flag=1;
reg jreset=0;
reg[5:0] cpu_writes=0;
output [5:0] cpu_writes1;
reg[31:0] test_path=0;
reg right_en=0;reg left_en=0;reg forward_en=0;reg reverse_en=0;
reg prev_right_en=0;reg prev_left_en=0;reg prev_forward_en=0;reg prev_reverse_en=0;
reg[4:0] past_node=0;reg[4:0] present_node=0;reg[4:0]future_node=1;
reg[31:0] path_planned[0:15];
always @(negedge clk) begin
jreset=0;
if(future_node==29 && (i_fault==1 || b_drop==1))begin

path_planned[0]=29;
path_planned[1]=28;
path_planned[2]=26;
path_planned[3]=27;
path_planned[4]=26;
path_planned[5]=25;
path_planned[6]=24;
path_planned[7]=20;

end
if(future_node==28 && (i_fault==1 || b_drop==1))begin

path_planned[0]=28;
path_planned[1]=26;
path_planned[2]=27;
path_planned[3]=26;
path_planned[4]=25;
path_planned[5]=24;
path_planned[6]=20;


end
if(future_node==27 && (i_fault==1 || b_drop==1))begin

path_planned[0]=27;
path_planned[1]=26;
path_planned[2]=25;
path_planned[3]=24;


end

    if(MemWrite && !reset) begin
        if (DataAdr == 32'h02000008) begin
            path_planned[ir]=WriteData;
				ir=ir+1;
        end
        if (DataAdr == 32'h0200000c & WriteData == 32'h1) begin
            cpu_done=1;
				ir=0;
				jreset=1;
				
				cpu_writes=cpu_writes+1;
        end
    end
	 
	 
end

always@(posedge node_update or posedge jreset)begin
	if(jreset==1 )j=1;
	else begin
			prev_right_en=right_en;
			prev_left_en=left_en;
			prev_forward_en=forward_en;
			prev_reverse_en=reverse_en;
			past_node=present_node;
			present_node=future_node;
			future_node=path_planned[j];
			j=j+1;
			if(future_node==29 && (i_fault==1 || b_drop==1))j=1;
			if(future_node==28 && (i_fault==1 || b_drop==1))j=1;
			if(future_node==27 && (i_fault==1 || b_drop==1))j=1;
			
			end
end
always@(present_node)begin
case(present_node)
1:begin
if(past_node==0 && future_node==29)begin
right_en=1;
reverse_en=0;
forward_en=0;
left_en=0;
end
end
29:begin
if(past_node==1 && future_node==28)begin
right_en=1;
reverse_en=0;
forward_en=0;
left_en=0;
end
if(past_node==20 && future_node==28)begin
right_en=0;
reverse_en=0;
forward_en=0;
left_en=1;
end
end
28:begin
if(past_node==29 && future_node==26)begin
right_en=0;
reverse_en=0;
forward_en=1;
left_en=0;
end
end
26:begin
if(past_node==28 && future_node==27)begin
right_en=0;
forward_en=0;
reverse_en=0;
left_en=1;
end
if(past_node==27 && future_node==25)begin
right_en=0;
forward_en=0;
reverse_en=0;
left_en=1;
end
end
27:begin
if(past_node==26 && future_node==26)begin
right_en=0;
forward_en=0;
reverse_en=1;
left_en=0;
end
end
25:begin
if(past_node==26 && future_node==24)begin
right_en=0;
reverse_en=0;
forward_en=1;
left_en=0;
end
end
24:begin
if(past_node==25 && future_node==20)begin
right_en=0;
reverse_en=0;
forward_en=0;
left_en=1;
end
end
20:begin
if(past_node==24 && future_node==21)begin
right_en=0;
reverse_en=0;
forward_en=1;
left_en=0;
end
if(past_node==21 && future_node==29)begin
right_en=1;
reverse_en=0;
forward_en=0;
left_en=0;
end
end
21:begin
if(past_node==20 && future_node==22)begin
right_en=0;
reverse_en=0;
forward_en=0;
left_en=1;
end
if(past_node==22 && future_node==20)begin
right_en=1;
reverse_en=0;
forward_en=0;
left_en=0;
end
end
22:begin
if(past_node==21 && future_node==21)begin
right_en=0;
reverse_en=1;
forward_en=0;
left_en=0;
end
end


endcase



end
assign cpu_writes1=cpu_writes;
endmodule