module bot_states(clk,en,unit_msg,pbm_complete,unit_pulse,su,present_node,EP,cpu_en,i_fault,p_block,b_drop,unitlist0,unitlist1,unitlist2,unitlist3);
input clk,en,unit_msg,pbm_complete;
input[1:0] unit_pulse,su;
input[4:0] present_node;
output [4:0] EP;
reg[4:0] EP=0;
output cpu_en,i_fault,p_block,b_drop;
reg[4:0] fault_at_eu=0;reg[4:0] fault_at_cu=0;reg[4:0] fault_at_ru=0;
reg cpu_en=0;reg i_fault=0; reg p_block=0;reg b_drop=0;reg block_detect=0;
integer count=0;integer detect_count=0; 
reg[1:0] unit_list[0:3]; output[1:0] unitlist0,unitlist1,unitlist2,unitlist3;
parameter IDENTIFY_FAULT=2'b00,PICK_BLOCK=2'b01,BLOCK_DROP=2'b10;
reg[1:0] present_state=0;reg[1:0] next_state=0;
reg start=0;integer i=0;reg flag=1;integer idx=0;
always@(negedge en)begin
	if(p_block==0)begin
		detect_count=detect_count+1;
		block_detect=0;
	end
	if(p_block==1)begin
		block_detect=1;
	end
end
always@(posedge clk)begin
	if(unit_msg==1)begin	start=1;unit_list[idx]=unit_pulse;idx=idx+1; end
	if(cpu_en==1)begin
					count=count+1;
					if(count==3)begin
						cpu_en=0;
						count=0;
					end
				end
	if(start==1)begin
		case(present_state)
			IDENTIFY_FAULT:begin
			i_fault=1;
			p_block=0;
			b_drop=0;
			if((detect_count % 2)==1)begin 
				next_state=PICK_BLOCK;
						if(unit_list[i]==2'b00)fault_at_eu=present_node;
						else if(unit_list[i]==2'b01)fault_at_cu=present_node;
						else if(unit_list[i]==2'b10)fault_at_ru=present_node;
				flag=1;
			end
			else	begin next_state=IDENTIFY_FAULT;
				
				
				case(unit_list[i])
					2'b00:begin 
						if(flag==1)begin
							cpu_en=1;
							EP=29;
							flag=0;
						end	
					end
					2'b01:begin 
						if(flag==1)begin
							cpu_en=1;
							EP=8;
							flag=0;
						end
					end
					2'b10:begin 
						if(flag==1)begin
							cpu_en=1;
							EP=19;
							flag=0;
						end
					end
				
				endcase
			end
			
			end
			PICK_BLOCK:begin
			i_fault=0;
			p_block=1;
			b_drop=0;
				if(block_detect==1)begin
				next_state=BLOCK_DROP;
				flag=1;
				end
				else begin next_state=PICK_BLOCK;
				if(pbm_complete==1)begin
					case(su)
					2'b00:begin 
						if(flag==1)begin
							cpu_en=1;
							EP=22;
							flag=0;
						end	
					end
					2'b01:begin 
						if(flag==1)begin
							cpu_en=1;
							EP=8;
							flag=0;
						end
					end
					2'b10:begin 
						if(flag==1)begin
							cpu_en=1;
							EP=19;
							flag=0;
						end
					end
					2'b11:begin 
						if(flag==1)begin
							cpu_en=1;
							EP=19;
							flag=0;
						end
					end
					
					endcase
				
				  end
				end
				 
			end 
			BLOCK_DROP:begin
			i_fault=0;
			
			p_block=0;
			b_drop=1;
				if((detect_count % 2)==0 &&(present_node==fault_at_eu || present_node==fault_at_cu || present_node==fault_at_ru))begin 
				next_state=IDENTIFY_FAULT; 
				flag=1;
				i=i+1;
				end
			else begin next_state=BLOCK_DROP;
				
				
				case(unit_list[i])
					2'b00:begin 
						if(flag==1)begin
							cpu_en=1;
							EP=29;
							flag=0;
						end	
					end
					2'b01:begin 
						if(flag==1)begin
							cpu_en=1;
							EP=8;
							flag=0;
						end
					end
					2'b10:begin 
						if(flag==1)begin
							cpu_en=1;
							EP=19;
							flag=0;
						end
					end
				
				endcase
				end
			end
		
		
		endcase
		present_state=next_state;
	end



end
assign unitlist0=unit_list[0];
assign unitlist1=unit_list[1];
assign unitlist2=unit_list[2];
assign unitlist3=unit_list[3];





endmodule