
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
0000017a l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
0000017a  w      .debug_info	00000000 .hidden pointer.c.d0d246f7
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000468 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000460 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
000004a8 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
0000048c g     F .text	0000001c memset
00000054 g     F .text	0000040c main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000004a8 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    4a800593          	addi	x11,x0,1192
  1c:	    00000613          	addi	x12,x0,0
  20:	    448000ef          	jal	x1,468 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    458000ef          	jal	x1,48c <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    420000ef          	jal	x1,460 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ### 
     ### */
     ### 
     ### // main function
     ### int main(int argc, char const *argv[])
     ### {
  54:	                ff010113          	addi	x2,x2,-16
  58:	                00112623          	sw	x1,12(x2)
  5c:	                00812423          	sw	x8,8(x2)
     ###     uint8_t idx = 0;
     ###     // ############# Add your code here #############
     ### 
     ###     cost_function[0] = 1;
     ###     cost_function[1] = 0;
     ###     cost_function[2] = 2;
  60:	                00200713          	addi	x14,x0,2
     ###     cost_function[0] = 1;
  64:	                02000437          	lui	x8,0x2000
     ###     cost_function[3] = 29;
     ###     cost_function[4] = 1;
     ###     cost_function[5] = 3;
  68:	                00300693          	addi	x13,x0,3
     ###     cost_function[2] = 2;
  6c:	                00e40923          	sb	x14,18(x8) # 2000012 <__bss_end+0x12>
     ###     cost_function[5] = 3;
  70:	                00d40aa3          	sb	x13,21(x8)
     ###     cost_function[6] = 8;
     ###     cost_function[7] = 2;
  74:	                00e40ba3          	sb	x14,23(x8)
     ###     cost_function[8] = 4;
     ###     
     ###     cost_function[9] = 3;
  78:	                00d40ca3          	sb	x13,25(x8)
     ###     cost_function[12] = 4;
     ###     cost_function[13] = 4;
     ###     cost_function[14] = 7;
     ###     cost_function[15] = 6;
     ###     cost_function[16] = 8;
     ###     cost_function[17] = 2;
  7c:	                02e400a3          	sb	x14,33(x8)
     ###     cost_function[10] = 5;
  80:	                00500693          	addi	x13,x0,5
     ###     cost_function[18] = 7;
     ###     cost_function[19] = 9;
     ###     cost_function[20] = 12;
     ###     cost_function[21] = 8;
     ###     cost_function[22] = 10;
  84:	                00a00713          	addi	x14,x0,10
     ###     cost_function[10] = 5;
  88:	                00d40d23          	sb	x13,26(x8)
     ###     cost_function[22] = 10;
  8c:	                02e40323          	sb	x14,38(x8)
     ###     cost_function[11] = 6;
  90:	                00600693          	addi	x13,x0,6
     ###     cost_function[23] = 11;
  94:	                00b00713          	addi	x14,x0,11
     ###     cost_function[0] = 1;
  98:	                00100593          	addi	x11,x0,1
     ###     cost_function[6] = 8;
  9c:	                00800793          	addi	x15,x0,8
     ###     cost_function[8] = 4;
  a0:	                00400613          	addi	x12,x0,4
     ###     cost_function[3] = 29;
  a4:	                01d00f93          	addi	x31,x0,29
     ###     cost_function[14] = 7;
  a8:	                00700f13          	addi	x30,x0,7
     ###     cost_function[20] = 12;
  ac:	                00c00e93          	addi	x29,x0,12
     ###     cost_function[24] = 9;
     ###     cost_function[25] = 9;
     ###     cost_function[26] = 8;
     ###     cost_function[27] = 13;
  b0:	                00d00e13          	addi	x28,x0,13
     ###     cost_function[11] = 6;
  b4:	                00d40da3          	sb	x13,27(x8)
     ###     cost_function[15] = 6;
  b8:	                00d40fa3          	sb	x13,31(x8)
     ###     cost_function[23] = 11;
  bc:	                02e403a3          	sb	x14,39(x8)
     ###     cost_function[19] = 9;
  c0:	                00900693          	addi	x13,x0,9
     ###    
     ###     cost_function[28] = 12;
     ###     cost_function[29] = 14;
  c4:	                00e00713          	addi	x14,x0,14
     ###     cost_function[0] = 1;
  c8:	                00b40823          	sb	x11,16(x8)
     ###     cost_function[3] = 29;
  cc:	                01f409a3          	sb	x31,19(x8)
     ###     cost_function[4] = 1;
  d0:	                00b40a23          	sb	x11,20(x8)
     ###     cost_function[6] = 8;
  d4:	                00f40b23          	sb	x15,22(x8)
     ###     cost_function[8] = 4;
  d8:	                00c40c23          	sb	x12,24(x8)
     ###     cost_function[12] = 4;
  dc:	                00c40e23          	sb	x12,28(x8)
     ###     cost_function[13] = 4;
  e0:	                00c40ea3          	sb	x12,29(x8)
     ###     cost_function[14] = 7;
  e4:	                01e40f23          	sb	x30,30(x8)
     ###     cost_function[16] = 8;
  e8:	                02f40023          	sb	x15,32(x8)
     ###     cost_function[18] = 7;
  ec:	                03e40123          	sb	x30,34(x8)
     ###     cost_function[19] = 9;
  f0:	                02d401a3          	sb	x13,35(x8)
     ###     cost_function[20] = 12;
  f4:	                03d40223          	sb	x29,36(x8)
     ###     cost_function[21] = 8;
  f8:	                02f402a3          	sb	x15,37(x8)
     ###     cost_function[24] = 9;
  fc:	                02d40423          	sb	x13,40(x8)
     ###     cost_function[25] = 9;
 100:	                02d404a3          	sb	x13,41(x8)
     ###     cost_function[26] = 8;
 104:	                02f40523          	sb	x15,42(x8)
     ###     cost_function[27] = 13;
 108:	                03c405a3          	sb	x28,43(x8)
     ###     cost_function[30] = 13;
     ###     cost_function[31] = 15;
     ###     cost_function[32] = 16;
 10c:	                01000793          	addi	x15,x0,16
     ###     cost_function[28] = 12;
 110:	                03d40623          	sb	x29,44(x8)
     ###     cost_function[29] = 14;
 114:	                02e406a3          	sb	x14,45(x8)
     ###     cost_function[1] = 0;
 118:	                000408a3          	sb	x0,17(x8)
     ###     cost_function[30] = 13;
 11c:	                03c40723          	sb	x28,46(x8)
     ###     cost_function[32] = 16;
 120:	                02f40823          	sb	x15,48(x8)
     ###     cost_function[33] = 14;
     ###     cost_function[34] = 14;
     ###     cost_function[35] = 17;
     ###     cost_function[36] = 18;
     ###     cost_function[37] = 16;
 124:	                02f40aa3          	sb	x15,53(x8)
     ###     cost_function[38] = 16;
 128:	                02f40b23          	sb	x15,54(x8)
     ###     cost_function[39] = 19;
 12c:	                01300793          	addi	x15,x0,19
 130:	                02f40ba3          	sb	x15,55(x8)
     ###    
     ###     cost_function[40] = 18;
     ###     cost_function[41] = 20;
     ###     cost_function[42] = 19;
 134:	                02f40d23          	sb	x15,58(x8)
     ###     cost_function[43] = 21;
     ###     cost_function[44] = 24;
     ###     cost_function[45] = 29;
     ###     cost_function[46] = 20;
     ###     cost_function[47] = 22;
 138:	                01600793          	addi	x15,x0,22
     ###     cost_function[33] = 14;
 13c:	                02e408a3          	sb	x14,49(x8)
     ###     cost_function[34] = 14;
 140:	                02e40923          	sb	x14,50(x8)
     ###     cost_function[47] = 22;
 144:	                02f40fa3          	sb	x15,63(x8)
     ###     cost_function[36] = 18;
 148:	                01200713          	addi	x14,x0,18
     ###     cost_function[48] = 23;
 14c:	                01700793          	addi	x15,x0,23
     ###     cost_function[51] = 20;
     ###     cost_function[52] = 25;
     ###     cost_function[53] = 24;
     ###     cost_function[54] = 26;
     ###     cost_function[55] = 25;
     ###     cost_function[56] = 27;
 150:	                01b00813          	addi	x16,x0,27
     ###     cost_function[41] = 20;
 154:	                01400513          	addi	x10,x0,20
     ###     cost_function[44] = 24;
 158:	                01800313          	addi	x6,x0,24
     ###     cost_function[52] = 25;
 15c:	                01900893          	addi	x17,x0,25
     ###     cost_function[31] = 15;
 160:	                00f00393          	addi	x7,x0,15
     ###     cost_function[35] = 17;
 164:	                01100293          	addi	x5,x0,17
     ###     cost_function[36] = 18;
 168:	                02e40a23          	sb	x14,52(x8)
     ###     cost_function[40] = 18;
 16c:	                02e40c23          	sb	x14,56(x8)
     ###     cost_function[48] = 23;
 170:	                04f40023          	sb	x15,64(x8)
     ###     cost_function[43] = 21;
 174:	                01500713          	addi	x14,x0,21
     ###     cost_function[54] = 26;
 178:	                01a00793          	addi	x15,x0,26
     ###     cost_function[56] = 27;
 17c:	                05040423          	sb	x16,72(x8)
     ###     cost_function[57] = 28;
 180:	                01c00813          	addi	x16,x0,28
     ###     cost_function[43] = 21;
 184:	                02e40da3          	sb	x14,59(x8)
     ###     cost_function[44] = 24;
 188:	                02640e23          	sb	x6,60(x8)
     ###     cost_function[49] = 21;
 18c:	                04e400a3          	sb	x14,65(x8)
     ###     cost_function[50] = 21;
 190:	                04e40123          	sb	x14,66(x8)
     ###     cost_function[52] = 25;
 194:	                05140223          	sb	x17,68(x8)
     ###     cost_function[53] = 24;
 198:	                046402a3          	sb	x6,69(x8)
     ###     cost_function[55] = 25;
 19c:	                051403a3          	sb	x17,71(x8)
     ###     cost_function[57] = 28;
 1a0:	                050404a3          	sb	x16,73(x8)
     ###     cost_function[31] = 15;
 1a4:	                027407a3          	sb	x7,47(x8)
     ###     cost_function[35] = 17;
 1a8:	                025409a3          	sb	x5,51(x8)
     ###     cost_function[41] = 20;
 1ac:	                02a40ca3          	sb	x10,57(x8)
     ###     cost_function[45] = 29;
 1b0:	                03f40ea3          	sb	x31,61(x8)
     ###     cost_function[46] = 20;
 1b4:	                02a40f23          	sb	x10,62(x8)
     ###     cost_function[51] = 20;
 1b8:	                04a401a3          	sb	x10,67(x8)
     ###     cost_function[54] = 26;
 1bc:	                04f40323          	sb	x15,70(x8)
     ###     cost_function[58] = 26;
 1c0:	                04f40523          	sb	x15,74(x8)
     ###     
     ###     cost_function[59] = 26;
 1c4:	                04f405a3          	sb	x15,75(x8)
     ###     cost_function[60] = 29;
 1c8:	                05f40623          	sb	x31,76(x8)
     ###     cost_function[61] = 1;
 1cc:	                04b406a3          	sb	x11,77(x8)
     ###     cost_function[62] = 20;
 1d0:	                04a40723          	sb	x10,78(x8)
     ###     cost_function[63] = 28;
 1d4:	                050407a3          	sb	x16,79(x8)
     ###     stind[7] = 15;
     ###     stind[8] = 17;
     ###     stind[9] = 21;
     ###     stind[10] = 24;
     ###     stind[11] = 25;
     ###     stind[12] = 26;
 1d8:	                06f40123          	sb	x15,98(x8)
     ###     stind[13] = 28;
     ###     stind[14] = 30;
 1dc:	                01e00793          	addi	x15,x0,30
 1e0:	                06f40223          	sb	x15,100(x8)
     ###     stind[15] = 33;
 1e4:	                02100793          	addi	x15,x0,33
 1e8:	                06f402a3          	sb	x15,101(x8)
     ###     stind[16] = 34;
 1ec:	                02200793          	addi	x15,x0,34
 1f0:	                06f40323          	sb	x15,102(x8)
     ###     stind[17] = 37;
 1f4:	                02500793          	addi	x15,x0,37
 1f8:	                06f403a3          	sb	x15,103(x8)
     ###     stind[18] = 38;
 1fc:	                02600793          	addi	x15,x0,38
 200:	                06f40423          	sb	x15,104(x8)
     ###     stind[19] = 40;
 204:	                02800793          	addi	x15,x0,40
 208:	                06f404a3          	sb	x15,105(x8)
     ###     stind[20] = 42;
 20c:	                02a00793          	addi	x15,x0,42
 210:	                06f40523          	sb	x15,106(x8)
     ###     stind[21] = 46;
 214:	                02e00793          	addi	x15,x0,46
 218:	                06f405a3          	sb	x15,107(x8)
     ###     stind[22] = 49;
 21c:	                03100793          	addi	x15,x0,49
 220:	                06f40623          	sb	x15,108(x8)
     ###     stind[23] = 50;
 224:	                03200793          	addi	x15,x0,50
 228:	                06f406a3          	sb	x15,109(x8)
     ###     stind[24] = 51;
 22c:	                03300793          	addi	x15,x0,51
 230:	                06f40723          	sb	x15,110(x8)
     ###     stind[25] = 53;
 234:	                03500793          	addi	x15,x0,53
 238:	                06f407a3          	sb	x15,111(x8)
     ###     stind[26] = 55;
 23c:	                03700793          	addi	x15,x0,55
 240:	                06f40823          	sb	x15,112(x8)
     ###     stind[27] = 58;
 244:	                03a00793          	addi	x15,x0,58
 248:	                06f408a3          	sb	x15,113(x8)
     ###     stind[28] = 59;
 24c:	                03b00793          	addi	x15,x0,59
 250:	                06f40923          	sb	x15,114(x8)
     ###     stind[29] = 61;
 254:	                03d00793          	addi	x15,x0,61
 258:	                06f409a3          	sb	x15,115(x8)
     ###     stind[30] = 64;
 25c:	                04000793          	addi	x15,x0,64
     ###     stind[1] = 1;
 260:	                04b40ba3          	sb	x11,87(x8)
     ###     stind[2] = 4;
 264:	                04c40c23          	sb	x12,88(x8)
     ###     stind[9] = 21;
 268:	                04e40fa3          	sb	x14,95(x8)
     ###     stind[10] = 24;
 26c:	                06640023          	sb	x6,96(x8)
     ###     stind[11] = 25;
 270:	                071400a3          	sb	x17,97(x8)
     ###     stind[13] = 28;
 274:	                070401a3          	sb	x16,99(x8)
     ###     stind[30] = 64;
 278:	                06f40a23          	sb	x15,116(x8)
     ###     stind[0] = 0;
 27c:	                04040b23          	sb	x0,86(x8)
     ###     stind[3] = 7;
 280:	                05e40ca3          	sb	x30,89(x8)
     ###     stind[4] = 9;
 284:	                04d40d23          	sb	x13,90(x8)
     ###     stind[5] = 12;
 288:	                05d40da3          	sb	x29,91(x8)
     ###     stind[6] = 13;
 28c:	                05c40e23          	sb	x28,92(x8)
     ###     stind[7] = 15;
 290:	                04740ea3          	sb	x7,93(x8)
     ###     stind[8] = 17;
 294:	                04540f23          	sb	x5,94(x8)
     ### 
     ###     for (uint8_t i = 0; i < 30; i++)
     ###     {
     ###         distance[i] = 99;
 298:	                07740513          	addi	x10,x8,119
 29c:	                01e00613          	addi	x12,x0,30
 2a0:	                06300593          	addi	x11,x0,99
 2a4:	                1e8000ef          	jal	x1,48c <memset>
     ###     }
     ###     distance[START_POINT] = 0;
 2a8:	                00044783          	lbu	x15,0(x8)
 2ac:	                01e00713          	addi	x14,x0,30
     ###     for (uint8_t j = 0; j < 30; j++)
     ###     {
     ###         uint8_t minIndex = 0;           // Initialize the index of the minimum element to the first element
     ###         uint8_t minValue = distance[0]; // Initialize the minimum value to the value of the first element
     ### 
     ###         for (uint8_t i = 1; i < 30; i++)
 2b0:	                01e00893          	addi	x17,x0,30
     ###     distance[START_POINT] = 0;
 2b4:	                0ff7f793          	andi	x15,x15,255
 2b8:	                00f40433          	add	x8,x8,x15
     ###         uint8_t minValue = distance[0]; // Initialize the minimum value to the value of the first element
 2bc:	                020007b7          	lui	x15,0x2000
     ###     distance[START_POINT] = 0;
 2c0:	                06040ba3          	sb	x0,119(x8)
     ###         uint8_t minValue = distance[0]; // Initialize the minimum value to the value of the first element
 2c4:	                07778813          	addi	x16,x15,119 # 2000077 <__bss_end+0x77>
     ###         current_node = minIndex;
     ### 
     ###         for (uint8_t j = stind[current_node]; j < stind[current_node + 1]; j++)
     ###         {
     ### 
     ###             if (distance[current_node] + 1 < distance[cost_function[j]] && distance[cost_function[j]] != 98)
 2c8:	                01078313          	addi	x6,x15,16
 2cc:	                06200513          	addi	x10,x0,98
     ###         uint8_t minValue = distance[0]; // Initialize the minimum value to the value of the first element
 2d0:	      /-------> 00084583          	lbu	x11,0(x16)
 2d4:	      |         00100693          	addi	x13,x0,1
     ###         uint8_t minIndex = 0;           // Initialize the index of the minimum element to the first element
 2d8:	      |         00000613          	addi	x12,x0,0
     ###             if (distance[i] < minValue)
 2dc:	      |  /----> 00d78e33          	add	x28,x15,x13
 2e0:	      |  |      077e4e03          	lbu	x28,119(x28)
 2e4:	      |  |      0ff6fe93          	andi	x29,x13,255
 2e8:	      |  |  /-- 00be7663          	bgeu	x28,x11,2f4 <pointer.c.d0d246f7+0x17a>
 2ec:	      |  |  |   000e0593          	addi	x11,x28,0
 2f0:	      |  |  |   000e8613          	addi	x12,x29,0
     ###         for (uint8_t i = 1; i < 30; i++)
 2f4:	      |  |  \-> 00168693          	addi	x13,x13,1
 2f8:	      |  \----- ff1692e3          	bne	x13,x17,2dc <pointer.c.d0d246f7+0x162>
     ###         current_node = minIndex;
 2fc:	      |         0cc78c23          	sb	x12,216(x15)
     ###         for (uint8_t j = stind[current_node]; j < stind[current_node + 1]; j++)
 300:	      |         0d87c683          	lbu	x13,216(x15)
 304:	      |         0ff6f693          	andi	x13,x13,255
 308:	      |         00d786b3          	add	x13,x15,x13
 30c:	      |         0566c683          	lbu	x13,86(x13)
 310:	/-----|-------> 0d87c603          	lbu	x12,216(x15)
 314:	|     |         0ff67613          	andi	x12,x12,255
 318:	|     |         00c78633          	add	x12,x15,x12
 31c:	|     |         05764603          	lbu	x12,87(x12)
 320:	|  /--|-------- 06c6ee63          	bltu	x13,x12,39c <pointer.c.d0d246f7+0x222>
     ###                 // printf("currentnode : %d neighbour: %d distance: %d previous_node: %d",current_node,i,distance[i],previous_node[i]);
     ###                 // printf("\n");
     ###             }
     ###         }
     ### 
     ###         distance[current_node] = 98;
 324:	|  |  |         0d87c683          	lbu	x13,216(x15)
     ###     for (uint8_t j = 0; j < 30; j++)
 328:	|  |  |         fff70713          	addi	x14,x14,-1
 32c:	|  |  |         0ff77713          	andi	x14,x14,255
     ###         distance[current_node] = 98;
 330:	|  |  |         0ff6f693          	andi	x13,x13,255
 334:	|  |  |         00d786b3          	add	x13,x15,x13
 338:	|  |  |         06a68ba3          	sb	x10,119(x13)
     ###     for (uint8_t j = 0; j < 30; j++)
 33c:	|  |  \-------- f8071ae3          	bne	x14,x0,2d0 <pointer.c.d0d246f7+0x156>
     ###     }
     ### 
     ###     uint8_t before_value = END_POINT;
 340:	|  |            0047c683          	lbu	x13,4(x15)
     ###     path_planned[0] = END_POINT;
 344:	|  |            0047c603          	lbu	x12,4(x15)
     ###     for (int i = 0; i < 30; i++)
     ###     {
     ###         path_planned[i + 1] = previous_node[before_value];
 348:	|  |            020005b7          	lui	x11,0x2000
     ###     uint8_t before_value = END_POINT;
 34c:	|  |            0ff6f693          	andi	x13,x13,255
     ###     path_planned[0] = END_POINT;
 350:	|  |            0ac78b23          	sb	x12,182(x15)
     ###     for (int i = 0; i < 30; i++)
 354:	|  |            01e00313          	addi	x6,x0,30
 358:	|  |            00000793          	addi	x15,x0,0
     ###         path_planned[i + 1] = previous_node[before_value];
 35c:	|  |     /----> 00d586b3          	add	x13,x11,x13
 360:	|  |     |      0966c683          	lbu	x13,150(x13)
 364:	|  |     |      00f588b3          	add	x17,x11,x15
 368:	|  |     |      0ff7f813          	andi	x16,x15,255
 36c:	|  |     |      0ad88ba3          	sb	x13,183(x17)
     ###         // printf("%d\n",path_planned[i]);
     ###         before_value = path_planned[i + 1];
     ###         idx++;
     ### 
     ###         if (path_planned[i] == START_POINT)
 370:	|  |     |      0005c503          	lbu	x10,0(x11) # 2000000 <__bss_end>
 374:	|  |     |      0b68c883          	lbu	x17,182(x17)
 378:	|  |     |      00180613          	addi	x12,x16,1
 37c:	|  |     |      0ff57513          	andi	x10,x10,255
 380:	|  |     |      0ff67613          	andi	x12,x12,255
 384:	|  |     |  /-- 00a88663          	beq	x17,x10,390 <pointer.c.d0d246f7+0x216>
     ###     for (int i = 0; i < 30; i++)
 388:	|  |     |  |   00178793          	addi	x15,x15,1
 38c:	|  |     \--|-- fc6798e3          	bne	x15,x6,35c <pointer.c.d0d246f7+0x1e2>
     ###     uint8_t end = idx - 1;
     ### 
     ###     while (start < end)
     ###     {
     ###         // Swap the elements at the start and end positions
     ###         uint8_t temp = path_planned[start];
 390:	|  |        \-> 020006b7          	lui	x13,0x2000
 394:	|  |            0b668693          	addi	x13,x13,182 # 20000b6 <__bss_end+0xb6>
 398:	|  |     /----- 0840006f          	jal	x0,41c <pointer.c.d0d246f7+0x2a2>
     ###             if (distance[current_node] + 1 < distance[cost_function[j]] && distance[cost_function[j]] != 98)
 39c:	|  \-----|----> 0d87c603          	lbu	x12,216(x15)
 3a0:	|        |      00668e33          	add	x28,x13,x6
 3a4:	|        |      000e4583          	lbu	x11,0(x28)
 3a8:	|        |      0ff67613          	andi	x12,x12,255
 3ac:	|        |      00c78633          	add	x12,x15,x12
 3b0:	|        |      07764603          	lbu	x12,119(x12)
 3b4:	|        |      010585b3          	add	x11,x11,x16
 3b8:	|        |      0005ce83          	lbu	x29,0(x11)
 3bc:	|        |      00160613          	addi	x12,x12,1
 3c0:	|        |  /-- 03d65863          	bge	x12,x29,3f0 <pointer.c.d0d246f7+0x276>
 3c4:	|        |  +-- 02ae8663          	beq	x29,x10,3f0 <pointer.c.d0d246f7+0x276>
     ###                 distance[cost_function[j]] = distance[current_node] + 1;
 3c8:	|        |  |   0d87c603          	lbu	x12,216(x15)
 3cc:	|        |  |   0ff67613          	andi	x12,x12,255
 3d0:	|        |  |   00c78633          	add	x12,x15,x12
 3d4:	|        |  |   07764603          	lbu	x12,119(x12)
 3d8:	|        |  |   00160613          	addi	x12,x12,1
 3dc:	|        |  |   00c58023          	sb	x12,0(x11)
     ###                 previous_node[cost_function[j]] = current_node;
 3e0:	|        |  |   000e4603          	lbu	x12,0(x28)
 3e4:	|        |  |   0d87c583          	lbu	x11,216(x15)
 3e8:	|        |  |   00c78633          	add	x12,x15,x12
 3ec:	|        |  |   08b60b23          	sb	x11,150(x12)
     ###         for (uint8_t j = stind[current_node]; j < stind[current_node + 1]; j++)
 3f0:	|        |  \-> 00168693          	addi	x13,x13,1
 3f4:	|        |      0ff6f693          	andi	x13,x13,255
 3f8:	\--------|----- f19ff06f          	jal	x0,310 <pointer.c.d0d246f7+0x196>
     ###         path_planned[start] = path_planned[end];
 3fc:	         |  /-> 00d787b3          	add	x15,x15,x13
     ###         uint8_t temp = path_planned[start];
 400:	         |  |   00d705b3          	add	x11,x14,x13
     ###         path_planned[start] = path_planned[end];
 404:	         |  |   0007c883          	lbu	x17,0(x15)
     ###         uint8_t temp = path_planned[start];
 408:	         |  |   0005c503          	lbu	x10,0(x11)
     ###         path_planned[end] = temp;
     ### 
     ###         // Move the start and end pointers toward each other
     ###         start++;
 40c:	         |  |   00170713          	addi	x14,x14,1
     ###         path_planned[start] = path_planned[end];
 410:	         |  |   01158023          	sb	x17,0(x11)
     ###         path_planned[end] = temp;
 414:	         |  |   00a78023          	sb	x10,0(x15)
     ###         start++;
 418:	         |  |   0ff77713          	andi	x14,x14,255
     ###         end--;
 41c:	         \--|-> 40e807b3          	sub	x15,x16,x14
 420:	            |   0ff7f793          	andi	x15,x15,255
     ###     while (start < end)
 424:	            \-- fcf76ce3          	bltu	x14,x15,3fc <pointer.c.d0d246f7+0x282>
     ###     }
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i)
 428:	                00000793          	addi	x15,x0,0
     ###     {
     ###         NODE_POINT = path_planned[i];
 42c:	                02000737          	lui	x14,0x2000
 430:	            /-> 00f706b3          	add	x13,x14,x15
 434:	            |   0b66c683          	lbu	x13,182(x13)
     ###     for (int i = 0; i < idx; ++i)
 438:	            |   00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 43c:	            |   00d70423          	sb	x13,8(x14) # 2000008 <__bss_end+0x8>
     ###     for (int i = 0; i < idx; ++i)
 440:	            \-- fec7c8e3          	blt	x15,x12,430 <pointer.c.d0d246f7+0x2b6>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 444:	                00100793          	addi	x15,x0,1
 448:	                00f70623          	sb	x15,12(x14)
     ###     _put_str("################################\n");
     ### 
     ### #endif
     ### 
     ###     return 0;
 44c:	                00c12083          	lw	x1,12(x2)
 450:	                00812403          	lw	x8,8(x2)
 454:	                00000513          	addi	x10,x0,0
 458:	                01010113          	addi	x2,x2,16
 45c:	                00008067          	jalr	x0,0(x1)

00000460 <_set_tls>:
 460:	00050213          	addi	x4,x10,0
 464:	00008067          	jalr	x0,0(x1)

00000468 <memcpy>:
 468:	       00050313          	addi	x6,x10,0
 46c:	/----- 00060e63          	beq	x12,x0,488 <memcpy+0x20>
 470:	|  /-> 00058383          	lb	x7,0(x11)
 474:	|  |   00730023          	sb	x7,0(x6)
 478:	|  |   fff60613          	addi	x12,x12,-1
 47c:	|  |   00130313          	addi	x6,x6,1
 480:	|  |   00158593          	addi	x11,x11,1
 484:	|  \-- fe0616e3          	bne	x12,x0,470 <memcpy+0x8>
 488:	\----> 00008067          	jalr	x0,0(x1)

0000048c <memset>:
 48c:	       00050313          	addi	x6,x10,0
 490:	/----- 00060a63          	beq	x12,x0,4a4 <memset+0x18>
 494:	|  /-> 00b30023          	sb	x11,0(x6)
 498:	|  |   fff60613          	addi	x12,x12,-1
 49c:	|  |   00130313          	addi	x6,x6,1
 4a0:	|  \-- fe061ae3          	bne	x12,x0,494 <memset+0x8>
 4a4:	\----> 00008067          	jalr	x0,0(x1)
